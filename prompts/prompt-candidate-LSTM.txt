The goal of this project is to develop a machine learning model that can predict future electricity prices using historical data. This dataset includes information on electricity prices, wind speed, and outdoor temperature, focusing particularly on weather conditions in Finland. The model will provide hourly price predictions and assess the impact of both typical and extreme weather scenarios on electricity prices. You can download the data set from here: https://filebin.net/an4ah85smc5rqjl7/a04e9cd96b9557edf877b5e54fab529472e1928db7cd869833516cf92248aabe.csv

Here's how the data set begins:

"Date Time","Temp [°C]","Wind [m/s]","Price [c/kWh]"
"2023-02-28 22:00:00","0.2","3.8","2.507"
"2023-02-28 23:00:00","-0.1","3.7","2.691"
"2023-03-01 00:00:00","-1.1","3.1","2.547"
"2023-03-01 01:00:00","-1.4","3.3","2.554"
"2023-03-01 02:00:00","-1.6","3.5","2.601"
"2023-03-01 03:00:00","-2","3","2.804"

Temperature and electricity price may be negative. Negative prices happen when demand is lower than supply. Our goal is to develop a machine learning model that can predict the electricity price, given the 3 other data points, like in these examples:

"Date Time","Temp [°C]","Wind [m/s]","Price [c/kWh]"
"2023-03-16 00:00:00","-5.1","3.4","?"
"2023-07-29 12:00:00","14.1","4.4","?"

The value of the question mark is to be predicted.

Given the challenges and the complex nature of electricity price prediction, influenced by numerous factors including weather conditions, a shift in our modeling approach is suggested. We propose using a Long Short-Term Memory (LSTM) network for this task. LSTM networks are a type of recurrent neural network (RNN) capable of learning order dependence in sequence prediction problems. This approach is well-suited for time series data like electricity prices, as it can effectively capture temporal correlations and the impact of past events on future prices.

### Steps for the LSTM Approach:

1. **Data Preparation**: Time series data must be transformed into a supervised learning problem for LSTM models. This involves creating sequences of past observations as inputs to predict the future value in the sequence.

2. **Feature Scaling**: LSTM models benefit from scaling the features to a range, typically (0, 1) or (-1, 1). This can be achieved using MinMaxScaler or StandardScaler from the `scikit-learn` library.

3. **Model Architecture**: Design the LSTM model with an appropriate number of layers and neurons. Start with a single LSTM layer followed by a dense layer to predict the electricity price.

4. **Compile the Model**: Use an appropriate optimizer (e.g., Adam) and loss function (e.g., mean squared error) for the regression task.

5. **Fit the Model**: Train the model on the training dataset. Use a validation split or a separate validation dataset to monitor the model's performance.

6. **Model Evaluation**: Evaluate the model on a test set to assess its prediction accuracy using metrics such as MAE and RMSE.

7. **Parameter Tuning and Optimization**: Based on the initial results, further tune the model's architecture, learning rate, batch size, and number of epochs to improve performance. This is optional and we can skip this step for now, let's produce the results from the first trial first.

8. **Prediction**: Use the trained model to predict electricity prices for the given examples and compare these predictions against actual prices to judge the model's effectiveness.

### Next Steps:

- Implement the LSTM model using a deep learning framework such as TensorFlow or PyTorch.
- Run validations with the LSTM model from the same dataset and produce the predicted and correct answers.
- Analyze the results to judge how well the LSTM model worked and what could be done to improve its predictions in the next round, including further tuning, exploring additional features, or incorporating external data sources that could impact electricity prices.